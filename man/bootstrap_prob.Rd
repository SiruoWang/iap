% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap_prob.R
\name{bootstrap_prob}
\alias{bootstrap_prob}
\title{bootstrap_prob function fits a Cox proportional hazards analysis model given predicted probabilities for a binary covariate.}
\usage{
bootstrap_prob(
  analysis_data,
  inf_formula,
  pred_prob_col,
  pred_var_col,
  B = 500,
  alpha = 0.05
)
}
\arguments{
\item{analysis_data}{dataframe that contains the predicted probability variable, and the other relevant variables for analysis}

\item{inf_formula}{formula describing Cox model of interest; passed to \code{coxph()}, should contain \code{pred_var_col} on the right side}

\item{pred_var_col}{character string; column name assigned to the binary variable of interest used in analysis}

\item{B}{integer; number of bootstrap iterations, defaults to 500}

\item{alpha}{numeric; significance level for inference, defaults to 0.05}

\item{pred_prob_var}{character string; column name of the predicted probability variable in \code{analysis_data} for the binary variable of interest}
}
\value{
tibble of inferential results; point estimates and 100(1 - alpha)% confidence intervals on the hazard ratio scale
}
\description{
This function takes in an analysis dataset containing a column of predicted probabilities.
The specified Cox model is fit over B nonparametric bootstrap iterations.
For each bootstrapped dataset, a binary variable vector is drawn from the predicted probabilities.
}
\examples{

data(EHRdata, package="postpi")
library(tidyverse)
library(survival)

labeled_data <- EHRdata[[1]]
analysis_data <- EHRdata[[2]]
postpi_calib <- postpi_covariate_calibrate(calib_data = labeled_data,
                                           true_var = "met_true",
                                           pred_prob_var = "met_prob",
                                           covariates = c("age_dx", "sex"),
                                           outcome = "time * status")

xtrain_analysis <- analysis_data \%>\%
 select(met_prob, age_dx, sex, time, status) \%>\%
 mutate(`time:status` = time * status) \%>\%
 as.matrix

analysis_data[["met_calib_prob"]] <- as.numeric(predict(postpi_calib$model,
                                                        newx = xtrain_analysis,
                                                        type = "response",
                                                        s = postpi_calib$lambda,
                                                        alpha = 0))
inf_formula <- as.formula("Surv(time, status) ~ met_calib + age_dx + sex")
res_calib <- bootstrap_prob(analysis_data, inf_formula, "met_calib_prob", "met_calib")

}
